// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Token.Management.EntityFrameworkCore.EntityFrameworkCore;

#nullable disable

namespace Token.Management.EntityFrameworkCore.Migrations
{
    [DbContext(typeof(TokenDbContext))]
    [Migration("20220606183717_CreateData")]
    partial class CreateData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Token.Management.Domain.Management.AccessFunction.MenuRoleFunction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("UserInfoId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("token_menu_role_function", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7914a004-b082-423f-8ed4-1341c0e440cf"),
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            MenuId = new Guid("3d7547f1-43eb-4b3b-983b-3584b8498689"),
                            RoleId = new Guid("c1721287-6894-401b-aa0d-c73b28244e09")
                        },
                        new
                        {
                            Id = new Guid("cc363f8d-b471-469a-a9d1-bcfc8a81ae9b"),
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            MenuId = new Guid("d73878e3-8f90-4ab8-8c57-548db98e3cd6"),
                            RoleId = new Guid("c1721287-6894-401b-aa0d-c73b28244e09")
                        },
                        new
                        {
                            Id = new Guid("952cf9b7-98ed-4e4a-9388-7bad259afbb8"),
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            MenuId = new Guid("6e0b2bdc-2a44-466a-9698-0ec884446d8e"),
                            RoleId = new Guid("c1721287-6894-401b-aa0d-c73b28244e09")
                        },
                        new
                        {
                            Id = new Guid("119a73ca-28a8-48f5-a284-d626613db93c"),
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            MenuId = new Guid("4c1b7f80-981e-464a-a376-f1bb4965d447"),
                            RoleId = new Guid("c1721287-6894-401b-aa0d-c73b28244e09")
                        },
                        new
                        {
                            Id = new Guid("9f276a48-8753-425e-8e0c-63297b517e83"),
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            MenuId = new Guid("7c4de579-cf8f-434d-8951-46935d05e234"),
                            RoleId = new Guid("c1721287-6894-401b-aa0d-c73b28244e09")
                        },
                        new
                        {
                            Id = new Guid("23b75d25-24da-493b-a83f-cca4ca3c0e4c"),
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            MenuId = new Guid("3a845e2d-63df-4a84-b569-410db7194843"),
                            RoleId = new Guid("c1721287-6894-401b-aa0d-c73b28244e09")
                        },
                        new
                        {
                            Id = new Guid("6508827b-1373-4631-af2f-1072ec77c531"),
                            CreationTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            MenuId = new Guid("f5b38af3-4cf2-4ad3-a249-56ac0f0ec94c"),
                            RoleId = new Guid("c1721287-6894-401b-aa0d-c73b28244e09")
                        });
                });

            modelBuilder.Entity("Token.Management.Domain.Management.AccessFunction.UserDepartmentFunction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("Id");

                    b.HasIndex("UserInfoId");

                    b.ToTable("token_user_department_function", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("75b64236-37c6-47c8-89c9-a5ec69bd2bf9"),
                            CreationTime = new DateTime(2022, 6, 7, 2, 37, 17, 74, DateTimeKind.Local).AddTicks(9894),
                            DepartmentId = new Guid("e4fa71e6-0bb1-45d7-a744-088d57eb14da"),
                            IsDeleted = false,
                            UserInfoId = new Guid("eaff4959-293d-463f-afdb-ec22ab3b48bb")
                        });
                });

            modelBuilder.Entity("Token.Management.Domain.Management.AccessFunction.UserRoleFunction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserInfoId");

                    b.ToTable("token_user_role_function", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("72e4ca93-3b60-4228-ba7b-c43fa049227a"),
                            CreationTime = new DateTime(2022, 6, 7, 2, 37, 17, 74, DateTimeKind.Local).AddTicks(9894),
                            IsDeleted = false,
                            RoleId = new Guid("c1721287-6894-401b-aa0d-c73b28244e09"),
                            UserInfoId = new Guid("eaff4959-293d-463f-afdb-ec22ab3b48bb")
                        });
                });

            modelBuilder.Entity("Token.Management.Domain.Management.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Describe")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Logo")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Company");

                    b.HasData(
                        new
                        {
                            Id = new Guid("735bceba-1761-4aba-9b78-7af4085236ec"),
                            Code = "wr",
                            CreationTime = new DateTime(2022, 6, 7, 2, 37, 17, 74, DateTimeKind.Local).AddTicks(9894),
                            Describe = "微软（Microsoft）是一家 美国 跨国科技企业，由 比尔·盖茨 和 保罗·艾伦 于1975年4月4日创立。 公司总部设立在 华盛顿州 雷德蒙德 （Redmond，邻近 西雅图 ），以 研发 、 制造 、 授权 和提供广泛的 电脑软件 服务业务为主 。",
                            IsDeleted = false,
                            Name = "Microsoft"
                        });
                });

            modelBuilder.Entity("Token.Management.Domain.Management.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .HasColumnType("longtext");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("UserInfoId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Id");

                    b.HasIndex("UserInfoId");

                    b.ToTable("token_department", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e4fa71e6-0bb1-45d7-a744-088d57eb14da"),
                            Code = "cs",
                            CompanyId = new Guid("735bceba-1761-4aba-9b78-7af4085236ec"),
                            CreationTime = new DateTime(2022, 6, 7, 2, 37, 17, 74, DateTimeKind.Local).AddTicks(9894),
                            Index = 0,
                            IsDeleted = false,
                            Name = "测试部门"
                        });
                });

            modelBuilder.Entity("Token.Management.Domain.Management.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Component")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Icon")
                        .HasColumnType("longtext");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Path")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("token_menu", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("3d7547f1-43eb-4b3b-983b-3584b8498689"),
                            Component = "Home",
                            CreationTime = new DateTime(2022, 6, 7, 2, 37, 17, 74, DateTimeKind.Local).AddTicks(9894),
                            Index = 0,
                            IsDeleted = false,
                            Name = "首页",
                            Path = "/home/index",
                            Title = "首页"
                        },
                        new
                        {
                            Id = new Guid("d73878e3-8f90-4ab8-8c57-548db98e3cd6"),
                            Component = "User",
                            CreationTime = new DateTime(2022, 6, 7, 2, 37, 17, 74, DateTimeKind.Local).AddTicks(9894),
                            Index = 1,
                            IsDeleted = false,
                            Name = "用户管理",
                            Path = "/user/index",
                            Title = "用户管理"
                        },
                        new
                        {
                            Id = new Guid("6e0b2bdc-2a44-466a-9698-0ec884446d8e"),
                            Component = "System",
                            CreationTime = new DateTime(2022, 6, 7, 2, 37, 17, 74, DateTimeKind.Local).AddTicks(9894),
                            Index = 2,
                            IsDeleted = false,
                            Name = "系统配置",
                            Path = "/system/index",
                            Title = "系统配置"
                        },
                        new
                        {
                            Id = new Guid("4c1b7f80-981e-464a-a376-f1bb4965d447"),
                            Component = "Work",
                            CreationTime = new DateTime(2022, 6, 7, 2, 37, 17, 74, DateTimeKind.Local).AddTicks(9894),
                            Index = 3,
                            IsDeleted = false,
                            Name = "工作",
                            Path = "/Work/index",
                            Title = "工作"
                        },
                        new
                        {
                            Id = new Guid("7c4de579-cf8f-434d-8951-46935d05e234"),
                            Component = "UserConfig",
                            CreationTime = new DateTime(2022, 6, 7, 2, 37, 17, 74, DateTimeKind.Local).AddTicks(9894),
                            Index = 1,
                            IsDeleted = false,
                            Name = "用户权限配置",
                            ParentId = new Guid("6e0b2bdc-2a44-466a-9698-0ec884446d8e"),
                            Path = "/system/userConfig/index",
                            Title = "用户权限配置"
                        },
                        new
                        {
                            Id = new Guid("3a845e2d-63df-4a84-b569-410db7194843"),
                            Component = "RoleConfig",
                            CreationTime = new DateTime(2022, 6, 7, 2, 37, 17, 74, DateTimeKind.Local).AddTicks(9894),
                            Index = 0,
                            IsDeleted = false,
                            Name = "角色配置",
                            ParentId = new Guid("6e0b2bdc-2a44-466a-9698-0ec884446d8e"),
                            Path = "/system/roleConfig/index",
                            Title = "角色配置"
                        },
                        new
                        {
                            Id = new Guid("f5b38af3-4cf2-4ad3-a249-56ac0f0ec94c"),
                            Component = "WorkConfig",
                            CreationTime = new DateTime(2022, 6, 7, 2, 37, 17, 74, DateTimeKind.Local).AddTicks(9894),
                            Index = 2,
                            IsDeleted = false,
                            Name = "工作流配置",
                            ParentId = new Guid("6e0b2bdc-2a44-466a-9698-0ec884446d8e"),
                            Path = "/system/workConfig/index",
                            Title = "工作流配置"
                        });
                });

            modelBuilder.Entity("Token.Management.Domain.Management.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .HasColumnType("longtext")
                        .HasComment("角色编号");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Index")
                        .HasColumnType("int")
                        .HasComment("序号");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasComment("角色名称");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("char(36)")
                        .HasComment("父节点");

                    b.Property<string>("Remark")
                        .HasColumnType("longtext")
                        .HasComment("备注");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("token_role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c1721287-6894-401b-aa0d-c73b28244e09"),
                            Code = "admin",
                            CreationTime = new DateTime(2022, 6, 7, 2, 37, 17, 74, DateTimeKind.Local).AddTicks(9894),
                            Index = 0,
                            IsDeleted = false,
                            Name = "管理员",
                            Remark = "系统管理员"
                        });
                });

            modelBuilder.Entity("Token.Management.Domain.SystemService.SystemMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsCheck")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Message")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.Property<int>("WorkFormCode")
                        .HasColumnType("int");

                    b.Property<Guid?>("WorkFormId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("token_system_message", (string)null);
                });

            modelBuilder.Entity("Token.Management.Domain.Users.UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EMail")
                        .HasColumnType("longtext")
                        .HasComment("邮箱");

                    b.Property<string>("HeadPortraits")
                        .HasColumnType("longtext")
                        .HasComment("头像");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<long?>("MobileNumber")
                        .HasMaxLength(11)
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasComment("用户昵称");

                    b.Property<string>("Password")
                        .HasColumnType("longtext")
                        .HasComment("密码");

                    b.Property<int>("Sex")
                        .HasColumnType("int")
                        .HasComment("性别");

                    b.Property<int>("Statue")
                        .HasColumnType("int")
                        .HasComment("状态");

                    b.Property<string>("WXOpenId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("token_user_info", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("eaff4959-293d-463f-afdb-ec22ab3b48bb"),
                            AccountNumber = "admin",
                            CreationTime = new DateTime(2022, 6, 7, 2, 37, 17, 74, DateTimeKind.Local).AddTicks(9894),
                            EMail = "239573049@qq.com",
                            HeadPortraits = "https://upfile2.asqql.com/upfile/hdimg/wmtp/wmtp/2018-07/08/18_7_8_16_10_08yoqapqci.jpg",
                            IsDeleted = false,
                            MobileNumber = 13049809673L,
                            Name = "管理员",
                            Password = "Aa010426",
                            Sex = 1,
                            Statue = 0
                        });
                });

            modelBuilder.Entity("Token.Management.Domain.WorkContent.WorkDemoMain", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Content")
                        .HasColumnType("longtext");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Remark")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("SubmitTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("WorkFlowNodeStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("token_work_demo_main", (string)null);
                });

            modelBuilder.Entity("Token.Management.Domain.WorkFlow.WorkflowApprovalRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("WorkflowNodeTemplateId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("WorkflowNodeTemplateId");

                    b.ToTable("token_workflow_approval_role", (string)null);
                });

            modelBuilder.Entity("Token.Management.Domain.WorkFlow.WorkflowApprovers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("UserInfoId")
                        .HasColumnType("char(36)");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext");

                    b.Property<int>("WorkFlowFormCode")
                        .HasColumnType("int");

                    b.Property<Guid>("WorkflowInstanceId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("WorkflowInstanceId");

                    b.ToTable("token_workflow_approvers", (string)null);
                });

            modelBuilder.Entity("Token.Management.Domain.WorkFlow.WorkflowInstance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("ArchiveDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Code")
                        .HasColumnType("longtext")
                        .HasComment("工作流实例code");

                    b.Property<string>("CurrentRoleCode")
                        .HasColumnType("longtext");

                    b.Property<bool>("HasBeenRead")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Remark")
                        .HasColumnType("longtext")
                        .HasComment("工作流实例备注");

                    b.Property<Guid>("SponsorId")
                        .HasColumnType("char(36)");

                    b.Property<string>("SponsorName")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("SponsoredDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("WorkFlowFormCode")
                        .HasColumnType("int");

                    b.Property<Guid>("WorkFormId")
                        .HasColumnType("char(36)");

                    b.Property<int>("WorkflowStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("WorkflowTemplateId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("SponsorId");

                    b.HasIndex("WorkflowTemplateId");

                    b.ToTable("token_workflow_instance", (string)null);
                });

            modelBuilder.Entity("Token.Management.Domain.WorkFlow.WorkflowNodeInstance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("AuditDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("AuditPersonId")
                        .HasColumnType("char(36)");

                    b.Property<string>("AuditPersonName")
                        .HasColumnType("longtext");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("NextNodeId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("NextTemplateNodeId")
                        .HasColumnType("char(36)");

                    b.Property<int>("NodeStatus")
                        .HasColumnType("int");

                    b.Property<Guid?>("PrevNodeId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("PrevTemplateNodeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Remark")
                        .HasColumnType("longtext");

                    b.Property<Guid>("TemplateNodeId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("WorkflowInstanceId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("WorkflowInstanceId");

                    b.ToTable("token_workflowNode_instance", (string)null);
                });

            modelBuilder.Entity("Token.Management.Domain.WorkFlow.WorkflowNodeTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("NextNodeId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("PrevNodeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Remark")
                        .HasColumnType("longtext");

                    b.Property<Guid>("WorkflowTemplateId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("WorkflowTemplateId");

                    b.ToTable("token_workflow_node_template", (string)null);
                });

            modelBuilder.Entity("Token.Management.Domain.WorkFlow.WorkflowTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .HasColumnType("longtext")
                        .HasComment("工作流模板编号");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasComment("工作流模板名称");

                    b.Property<string>("Remark")
                        .HasColumnType("longtext")
                        .HasComment("工作流模板备注");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("token_workflow_template", (string)null);
                });

            modelBuilder.Entity("Volo.Abp.Data.ExtraPropertyDictionary", b =>
                {
                    b.Property<int>("Count")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.HasKey("Count");

                    b.ToTable("ExtraPropertyDictionary");
                });

            modelBuilder.Entity("Token.Management.Domain.Management.AccessFunction.MenuRoleFunction", b =>
                {
                    b.HasOne("Token.Management.Domain.Management.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Token.Management.Domain.Management.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Token.Management.Domain.Users.UserInfo", null)
                        .WithMany("MenuRoleFunction")
                        .HasForeignKey("UserInfoId");

                    b.Navigation("Menu");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Token.Management.Domain.Management.AccessFunction.UserDepartmentFunction", b =>
                {
                    b.HasOne("Token.Management.Domain.Management.Department", "Department")
                        .WithMany("UserDepartmentFunction")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Token.Management.Domain.Users.UserInfo", "UserInfo")
                        .WithMany("UserDepartmentFunction")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("Token.Management.Domain.Management.AccessFunction.UserRoleFunction", b =>
                {
                    b.HasOne("Token.Management.Domain.Management.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Token.Management.Domain.Users.UserInfo", "UserInfo")
                        .WithMany("UserRoleFunction")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("Token.Management.Domain.Management.Department", b =>
                {
                    b.HasOne("Token.Management.Domain.Management.Company", "Company")
                        .WithMany("Department")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Token.Management.Domain.Users.UserInfo", null)
                        .WithMany("Department")
                        .HasForeignKey("UserInfoId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Token.Management.Domain.WorkFlow.WorkflowApprovalRole", b =>
                {
                    b.HasOne("Token.Management.Domain.Management.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Token.Management.Domain.WorkFlow.WorkflowNodeTemplate", "WorkflowNodeTemplate")
                        .WithMany("WorkflowApprovalRole")
                        .HasForeignKey("WorkflowNodeTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("WorkflowNodeTemplate");
                });

            modelBuilder.Entity("Token.Management.Domain.WorkFlow.WorkflowApprovers", b =>
                {
                    b.HasOne("Token.Management.Domain.WorkFlow.WorkflowInstance", "WorkflowInstance")
                        .WithMany("WorkflowApprovers")
                        .HasForeignKey("WorkflowInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkflowInstance");
                });

            modelBuilder.Entity("Token.Management.Domain.WorkFlow.WorkflowInstance", b =>
                {
                    b.HasOne("Token.Management.Domain.Users.UserInfo", "Sponsor")
                        .WithMany()
                        .HasForeignKey("SponsorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Token.Management.Domain.WorkFlow.WorkflowTemplate", "WorkflowTemplate")
                        .WithMany("WorkflowInstance")
                        .HasForeignKey("WorkflowTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sponsor");

                    b.Navigation("WorkflowTemplate");
                });

            modelBuilder.Entity("Token.Management.Domain.WorkFlow.WorkflowNodeInstance", b =>
                {
                    b.HasOne("Token.Management.Domain.WorkFlow.WorkflowInstance", "WorkflowInstance")
                        .WithMany("WorkflowNodeInstances")
                        .HasForeignKey("WorkflowInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkflowInstance");
                });

            modelBuilder.Entity("Token.Management.Domain.WorkFlow.WorkflowNodeTemplate", b =>
                {
                    b.HasOne("Token.Management.Domain.WorkFlow.WorkflowTemplate", "WorkflowTemplate")
                        .WithMany("WorkflowNodeTemplate")
                        .HasForeignKey("WorkflowTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkflowTemplate");
                });

            modelBuilder.Entity("Token.Management.Domain.Management.Company", b =>
                {
                    b.Navigation("Department");
                });

            modelBuilder.Entity("Token.Management.Domain.Management.Department", b =>
                {
                    b.Navigation("UserDepartmentFunction");
                });

            modelBuilder.Entity("Token.Management.Domain.Users.UserInfo", b =>
                {
                    b.Navigation("Department");

                    b.Navigation("MenuRoleFunction");

                    b.Navigation("UserDepartmentFunction");

                    b.Navigation("UserRoleFunction");
                });

            modelBuilder.Entity("Token.Management.Domain.WorkFlow.WorkflowInstance", b =>
                {
                    b.Navigation("WorkflowApprovers");

                    b.Navigation("WorkflowNodeInstances");
                });

            modelBuilder.Entity("Token.Management.Domain.WorkFlow.WorkflowNodeTemplate", b =>
                {
                    b.Navigation("WorkflowApprovalRole");
                });

            modelBuilder.Entity("Token.Management.Domain.WorkFlow.WorkflowTemplate", b =>
                {
                    b.Navigation("WorkflowInstance");

                    b.Navigation("WorkflowNodeTemplate");
                });
#pragma warning restore 612, 618
        }
    }
}
